# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: PowerShell@2
      displayName: Obtener la version del ms-app
      inputs:
        targetType: 'inline'
        script: |
          [xml]$pomXml = Get-Content .\pom.xml
          # version
          Write-Host $pomXml.project.version
          $version=$pomXml.project.version
          $version = $version.Split("-")[0]
          Write-Host $version
          Write-Host "##vso[task.setvariable variable=version]$version"
        workingDirectory: '$(Build.SourcesDirectory)'
    # - task: Docker@2
    #   displayName: Docker login
    #   inputs:
    #     containerRegistry: 'dockerhub'
    #     command: 'login'
    #     addPipelineData: false
    #     addBaseImageData: false

    # - task: Docker@2
    #   displayName: "Build an pushimage version"
    #   inputs:
    #     containerRegistry: 'dockerhub'
    #     repository: 'wlopezob/ms-hola'
    #     command: 'buildAndPush'
    #     Dockerfile: 'dockerfile'
    #     buildContext: '$(Build.SourcesDirectory)'
    #     tags: '$(version)'
    #     addPipelineData: false
    #     addBaseImageData: false
    - task: replacetokens@4
      displayName: 'Estableciendo la version en yml'
      inputs:
        targetFiles: '**/devops/k8s/01-pod.yml'
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        useLegacyPattern: false
        emptyValue: 'VERSION'
        defaultValue: '$(version)'
        enableTelemetry: true
    # - script: |
    #     cat devops/k8s/01-pod.yml
    - script: |
          echo $(kube_config) | base64 -d > config
          cat config
          ls -la
      displayName: Creacion kubeconfig
    
    - task: AWSCLI@1
      inputs:
        awsCredentials: 'awscli'
        regionName: 'us-east-1'
        awsCommand: 'eks'
        awsSubCommand: 'list-clusters'
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'
    # - task: AWSShellScript@1
    #   inputs:
    #     awsCredentials: 'awscli'
    #     regionName: 'us-east-1'
    #     scriptType: 'inline'
    #     inlineScript: 'kubectl apply -f . --kubeconfig=config'
    #     disableAutoCwd: true
    #     workingDirectory: '$(Build.SourcesDirectory)'
    #     failOnStandardError: true

    - task: Kubernetes@1
      inputs:
        connectionType: 'None'
        command: 'apply'
        arguments: '-f . --kubeconfig=config'
        secretType: 'generic'
        forceUpdate: false
        outputFormat: 'none'

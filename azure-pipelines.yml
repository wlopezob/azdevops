# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: CI/CD
    pool:
      vmImage: ubuntu-latest
    steps:
    
    - task: PowerShell@2
      displayName: Get version pom.xml
      inputs:
        targetType: 'inline'
        script: |
          [xml]$pomXml = Get-Content .\pom.xml
          # version
          Write-Host $pomXml.project.version
          $version=$pomXml.project.version
          $version = $version.Split("-")[0]
          Write-Host $version
          Write-Host "##vso[task.setvariable variable=version]$version"
        workingDirectory: '$(Build.SourcesDirectory)'
    - task: SonarQubePrepare@5
      displayName: Prepare configuration Sonarqube
      inputs:
        SonarQube: 'control-maderero'
        scannerMode: 'Other'
    - task: Maven@3
      displayName: "Test unitario, CheckStyle, Cobertura"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'Pruebas Unitarias'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        checkStyleRunAnalysis: true
    
    - task: PublishCodeCoverageResults@1
      displayName: "Publicar reporte de cobertura"
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(Build.SourcesDirectory)/target/site/jacoco/jacoco.xml'
        reportDirectory: '$(Build.SourcesDirectory)/target/site/jacoco'
        failIfCoverageEmpty: true

    - task: Docker@2
      displayName: "Build an push image version"
      inputs:
        containerRegistry: 'dockerhub'
        repository: 'wlopezob/ms-hola'
        command: 'buildAndPush'
        Dockerfile: 'dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: '$(version)'
        addPipelineData: false
        addBaseImageData: false
    - task: replacetokens@4
      displayName: 'k8s: Set version pod.yml'
      inputs:
        targetFiles: '**/devops/k8s/01-pod.yml'
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        writeBOM: true
        actionOnMissing: 'warn'
        keepToken: false
        actionOnNoFiles: 'continue'
        enableTransforms: false
        useLegacyPattern: false
        emptyValue: 'VERSION'
        defaultValue: '$(version)'
        enableTelemetry: true
    # - script: |
    #     cat devops/k8s/01-pod.yml
    - script: |
          echo $(kube_config) | base64 -d > config
      displayName: Create kubeconfig
    
    - task: KubectlInstaller@0
      displayName: 'Install kubectl'
      inputs:
        kubectlVersion: 'latest'
    
    # - task: AWSShellScript@1
    #   displayName: 'Creacion pod y services'
    #   inputs:
    #     awsCredentials: 'awscli'
    #     regionName: 'us-east-1'
    #     scriptType: 'inline'
    #     inlineScript: |
    #       kubectl apply -f $(Build.SourcesDirectory)/devops/k8s/. --kubeconfig=config
    #     disableAutoCwd: true
    #     workingDirectory: '$(Build.SourcesDirectory)'
    #     failOnStandardError: true